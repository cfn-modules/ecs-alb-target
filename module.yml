---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn-modules: ECS ALB target'
# cfn-modules:implements(Target)
Parameters:
  AlbModule:
    Description: 'Stack name of alb module.'
    Type: String
  AlbListenerModule:
    Description: 'Stack name of alb-listener module.'
    Type: String
  VpcModule:
    Description: 'Stack name of vpc module.'
    Type: String
  AlertingModule:
    Description: 'Optional but recommended stack name of alerting module.'
    Type: String
    Default: ''
  Priority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  HostPattern:
    Description: 'Optional host pattern (you can specify HostPattern and/or PathPattern).'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  PathPattern:
    Description: 'Optional path pattern (you can specify PathPattern and/or HostPattern).'
    Type: String
    Default: '/*'
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  DeregistrationDelayInSeconds:
    Description: 'The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
Conditions:
  HasAlertingModule: !Not [!Equals [!Ref AlertingModule, '']]
  HasPathPattern: !Not [!Equals [!Ref PathPattern, '']]
  HasHostPattern: !Not [!Equals [!Ref HostPattern, '']]
Resources:
  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - !If [HasHostPattern, {Field: host-header, Values: [!Ref HostPattern]}, !Ref 'AWS::NoValue']
      - !If [HasPathPattern, {Field: path-pattern, Values: [!Ref PathPattern]}, !Ref 'AWS::NoValue']
      ListenerArn: {'Fn::ImportValue': !Sub '${AlbListenerModule}-Arn'}
      Priority: !Ref Priority
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-399'
      Port: 8080 # overriden when containers are attached
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref DeregistrationDelayInSeconds
      VpcId: {'Fn::ImportValue': !Sub '${VpcModule}-Id'}
  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${AlertingModule}-Arn'}
      Dimensions:
      - Name: LoadBalancer
        Value: {'Fn::ImportValue': !Sub '${AlbModule}-LoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt TargetGroup.TargetGroupFullName
  TargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${AlertingModule}-Arn'}
      Dimensions:
      - Name: LoadBalancer
        Value: {'Fn::ImportValue': !Sub '${AlbModule}-LoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt TargetGroup.TargetGroupFullName
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: {'Fn::ImportValue': !Sub '${VpcModule}-Id'}
      SecurityGroupIngress:
      - SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${AlbModule}-SecurityGroupId'}
        FromPort: 0
        ToPort: 65535
        IpProtocol: tcp
Outputs:
  ModuleId:
    Value: 'ecs-alb-target'
  ModuleVersion:
    Value: '1.0.3'
  StackName:
    Value: !Ref 'AWS::StackName'
  Arn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-Arn'
  SecurityGroupId:
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
